#!/usr/bin/env bash

# This script tests a web application for security.
#
# @author Bj√∂rn Hempel <bjoern@hempel.li>
#
# Todo:
# - ssl certificate check
# - https check
# - Secure-Links count check
# - informations
#   - ip
#   - provider
#   - dns server


# script path
scriptPath="$(dirname "$(readlink "$0")")"

# include some libraries
source "$scriptPath/../libs/tools"
source "$scriptPath/../libs/output"
source "$scriptPath/../libs/request"
source "$scriptPath/../libs/analyse"
source "$scriptPath/../libs/os"
source "$scriptPath/../libs/cert"
source "$scriptPath/../libs/domain"

# initial values
executionType="check"

# declare parameter list array
PARAMETERS=()

# sets the title space
titleSpace=35

# sets the seperator count
seperatorCount=80

# set default texts
defaultHeaderErrorText="Check the following headers"

# set user agent
userAgent='Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36'

# show some extra informations
verbose=true

# ssl error days
sslErrorDays=7

# ssl warning days (must be greater than sslErrorDays)
sslWarningDays=14

# initial values
SHOW_HEADER=false
SHOW_DNS=false

# read arguments
# help:
# help: Usage: %scriptname% [options...] {install|update|status}
while [[ $# > 0 ]]; do
    case "$1" in
        # help:         --show-header             Show all headers next to the test.
        --show-header)
            SHOW_HEADER=true
            ;;

        # help:         --show-dns                Show the dns settings next to the test.
        --show-header)
            SHOW_DNS=true
            ;;

        # help:  -h,    --help                    Shows this help.
        # help:
        -h|--help)
            cat "$BASH_SOURCE" | grep --color=never "# help:" | grep -v 'cat parameter' | sed 's/[ ]*# help:[ ]*//g' | sed "s~%scriptname%~$scriptname~g"
            exit 0
            ;;

        # help:  -v,    --version                 Shows the version number.
        # help:
        -v|--version)
            [ "$(type -t showVersion)" == "function" ] && showVersion || echo "Create a showVersion function to show some text here."
            exit 0
            ;;

        # collect all unknown parameters
        *)
            PARAMETERS+=("$1")
            ;;
    esac
    shift
done

function doHttpStatusCheck {
    local statusCode=200
    local checkName="HTTP status code $statusCode"
    local filter="HTTP/[0-9]\.[0-9] "
    local header="$1"
    local headerFiltered=$(echo -n "$header" | grep -i --color=never "$filter")

    if [[ "$headerFiltered" =~ HTTP/1.1[[:space:]]([0-9]*) ]]; then
        local content=${BASH_REMATCH[1]}

				if [ "$content" == "$statusCode" ]; then
            printSuccess "$checkName"
            return 0
        else
            printError "$checkName" "Status code $statusCode was not found."
            $verbose && printBulletItem "Status code: $content"
            return 1
        fi
    fi

    # no header was found
    printSuccess "$checkName" true
    $verbose && printBulletItem "No $filter header was found. Usually one is expected."
    return 0
}

function doHttpsCheck {
    local checkName="HTTPS check"
    local lastRedirect="$1"

    if [[ "$lastRedirect" =~ ^https ]]; then
        printSuccess "$checkName"
        return 0
    fi

    printError "$checkName" "The page is not securely transmitted."
    return 1
}


function doSslCheck {
    local checkName="SSL check"
    local lastRedirect="$1"
    local os="$2"
    local domain=$(getFullDomainFromUrl "$lastRedirect")

    if [[ "$lastRedirect" =~ ^https ]]; then
        validDays=$(validDaysOfCert "$domain" "$os")

        if [ "$validDays" -lt $sslErrorDays ]; then
            printError "$checkName"
            $verbose && printBulletItem "only $validDays days left"
            return 1
        elif [ "$validDays" -lt $sslWarningDays ]; then
            printSuccess "$checkName" true
            $verbose && printBulletItem "only $validDays days left"
            return 0
        else
            printSuccess "$checkName"
            $verbose && printBulletItem "$validDays days left"
            return 0
        fi
    fi

    printError "$checkName" "The page is not securely transmitted."
    return 1
}

function doXPoweredCheck {
    local checkName="X-Powered-By"
    local filter="X-Powered-By"
    local header="$1"
    local headerFiltered=$(echo -n "$header" | grep -i --color=never "$filter:")

    # no header was found
    if [ "$headerFiltered" == "" ]; then
        printSuccess "$checkName" 
        return 0
    fi

    # header was found -> check header
    local content=$(echo -n "$headerFiltered" | sed -e 's/^[0-9]*[ ]*'$filter': //')

    printError "$checkName" "\"$filter\" header was found and is not secure."
    $verbose && printBulletItem "Content: $content"
    return 1
}

function doXGeneratorCheck {
    local checkName="X-Generator"
    local filter="X-Generator"
    local header="$1"
    local headerFiltered=$(echo -n "$header" | grep -i --color=never "$filter:")

    # no header was found
    if [ "$headerFiltered" == "" ]; then
        printSuccess "$checkName" 
        return 0
    fi

    # header was found -> check header
    local content=$(echo -n "$headerFiltered" | sed -e 's/^[0-9]*[ ]*'$filter': //')

    printError "$checkName" "\"$filter\" header was found and is not secure."
    $verbose && printBulletItem "Content: $content"
    return 1
}

function doHeaderCookieCheck {
    local checkName="Cookie Security"
    local filter="Cookie"
    local header="$1"
    local headerFiltered=$(echo -n "$header" | grep -i --color=never "$filter:")
    local headerFilteredNotSecured=$(echo -n "$headerFiltered" | awk '!(tolower($0) ~ /[ ]*httponly/ && tolower($0) ~ /;[ ]*secure/)')

    if [ "$headerFilteredNotSecured" == "" ]; then
        printSuccess "$checkName"
        return 0
    fi

    # given headers do have some issues
    printErrorIncludingMessage "$checkName" "$defaultHeaderErrorText" "$headerFilteredNotSecured"
    return 1
}

function doHstsCheck {
    local checkName="HTTP Strict Transport Security"
    local filter="Strict-Transport-Security"
    local header="$1"
    local headerFiltered=$(echo -n "$header" | grep -i --color=never "$filter:")

    # no header was found
    if [ "$headerFiltered" == "" ]; then
        printError "$checkName" "No \"$checkName\" header was found."
        return 1
    fi

    # check given header
    local headerFilteredNotSecured=$(echo -n "$headerFiltered" | \
        awk '!(tolower($0) ~ /[:;][ ]*max-age/)' \
    )

    # we found insecure headers
    if [ "$headerFilteredNotSecured" != "" ]; then
        printErrorIncludingMessage "$checkName" "$defaultHeaderErrorText" "$headerFilteredNotSecured"
        return 1
    fi

    # check given header
    local headerFilteredNotOptimal=$(echo -n "$headerFiltered" | \
        awk '!(tolower($0) ~ /[:;][ ]*max-age/ && tolower($0) ~ /[:;][ ]*includesubdomains/ && tolower($0) ~ /[:;][ ]*preload/)' \
    )

    if [ "$headerFilteredNotOptimal" != "" ]; then
        printSuccess "$checkName" true
        $verbose && printBulletItem "It is recommended to include the attributes includesubdomains and preload."
        return 0
    fi

    printSuccess "$checkName"
    return 0
}

function doCspCheck {
    local checkName="Content-Security-Policy"
    local filter="Content-Security-Policy"
    local header="$1"
    local headerFiltered=$(echo -n "$header" | grep -i --color=never "$filter:")
    local warningText=""

    # no header was found
    if [ "$headerFiltered" == "" ]; then
        printError "$checkName" "No \"$checkName\" header was found."
        return 1
    fi

    # some error checks
    local error=false
    if $error; then
        printErrorIncludingMessage "$checkName" "$defaultHeaderErrorText" "$headerFilteredNotSecured"
        return 1
    fi

    # some warning checks
    local headerFilteredNotSecured=$(echo -n "$headerFiltered" | grep -i --color=never "unsafe-inline")

    if [ "$headerFilteredNotSecured" != "" ]; then
        warningText="$warningText"$(printBulletItem "It is not recommend to use the setting \"unsafe-inline\".")
    fi

    # print status text
    if [ "$warningText" == "" ]; then
        printSuccess "$checkName"
    else
        printSuccess "$checkName" true
        echo -e "$warningText"
    fi
    return 0
}

function doXssCheck {
    local checkName="X-XSS-Protection Header"
    local filter="X-XSS-Protection"
    local header="$1"
    local headerFiltered=$(echo -n "$header" | grep -i --color=never "$filter:")

    # no header was found
    if [ "$headerFiltered" == "" ]; then
        printError "$checkName" "No \"$checkName\" header was found."
        return 1
    fi

    local headerFilteredNotSecured=""
                                                                                                                                                                                         
    if [ "$headerFilteredNotSecured" == "" ]; then
        printSuccess "$checkName"
        return 0
    fi

    return 1
}

function doCtoCheck {
    local checkName="X-Content-Type-Options"
    local filter="X-Content-Type-Options"
    local header="$1"
    local headerFiltered=$(echo -n "$header" | grep -i --color=never "$filter:")

    # no header was found
    if [ "$headerFiltered" == "" ]; then
        printError "$checkName" "No \"$checkName\" header was found."
        return 1
    fi

    local headerFilteredNotSecured=""

    if [ "$headerFilteredNotSecured" == "" ]; then
        printSuccess "$checkName"
        return 0
    fi

    return 1
}

function doFoCheck {
    local checkName="X-Frame-Options"
    local filter="X-Frame-Options"
    local header="$1"
    local headerFiltered=$(echo -n "$header" | grep -i --color=never "$filter:")

    # no header was found
    if [ "$headerFiltered" == "" ]; then
        printError "$checkName" "No \"$checkName\" header was found."
        return 1
    fi

    local headerFilteredNotSecured=""

    if [ "$headerFilteredNotSecured" == "" ]; then
        printSuccess "$checkName"
        return 0
    fi

    return 1
}

function doRpCheck {
    local checkName="Referrer-Policy"
    local filter="Referrer-Policy"
    local header="$1"
    local headerFiltered=$(echo -n "$header" | grep -i --color=never "$filter:")

    # no header was found
    if [ "$headerFiltered" == "" ]; then
        printError "$checkName" "No \"$checkName\" header was found."
        return 1
    fi

    local headerFilteredNotSecured=""

    if [ "$headerFilteredNotSecured" == "" ]; then
        printSuccess "$checkName"
        return 0
    fi

    return 1
}

function doFpCheck {
    local checkName="Feature-Policy"
    local filter="Feature-Policy"
    local header="$1"
    local headerFiltered=$(echo -n "$header" | grep -i --color=never "$filter:")

    # no header was found
    if [ "$headerFiltered" == "" ]; then
        printError "$checkName" "No \"$filter\" header was found."
        return 1
    fi

    local headerFilteredNotSecured=""

    if [ "$headerFilteredNotSecured" == "" ]; then
        printSuccess "$checkName"
        return 0
    fi

    return 1
}

function doShCheck {
    local checkName="Server-Header"
    local filter="Server"
    local header="$1"
    local headerFiltered=$(echo -n "$header" | grep -i --color=never "$filter:")

    # no header was found
    if [ "$headerFiltered" == "" ]; then
        printSuccess "$checkName"
        return 0
    fi

    # header was found -> check header
    local content=$(echo -n "$headerFiltered" | sed -e 's/^[0-9]*[ ]*Server: //')

    local contentCheck=true && [[ "$content" =~ ^[a-zA-Z]+$ ]] || contentCheck=false

    if ! $contentCheck; then
        printError "$checkName" "\"$filter\" header was found and is not secure."
        $verbose && printBulletItem "Content: $content"
        return 1
    fi

    printSuccess "$checkName" true
    $verbose && printBulletItem "If possible, disable the following content: \"$content\""
    return 0
}

function doSlCheck {
    local checkName="Secure-Links"
    local header="$1"
    local body="$2"

    # todo: check if xmllink exists

    local numberLinksUnsecure=$(\
        echo "$body" | \
        xmllint --nowarning --html --xpath '//a[contains(@target, "_blank") and (starts-with(@href, "http") or starts-with(@href, "//")) and (not(contains(@rel, "noopener")) or not(contains(@rel, "noreferrer")))]' - 2>/dev/null | \
        sed 's/><a />\'$'\n<a /g' | \
        grep '<a ' | \
        wc -l | \
        xargs \
    )

    # we do have some insecure links
    if [ $numberLinksUnsecure -gt 0 ]; then
        printError "$checkName" "Found $numberLinksUnsecure external links with target \"_blank\" and without rel attribute \"noopener\" and \"noreferrer\"."
        return 1
    fi

    # all links are safe
    printSuccess "$checkName"
    return 0
}

function doMdCheck {
    local checkName="Metadata"
    local header="$1"
    local body="$2"

    # todo: check if xmllink exists

    local metaGenerator=$(\
        echo "$body" | \
        xmllint --nowarning --html --pretty 0 --xpath 'string(//meta[@name="generator"]/@content)' - 2>/dev/null | \
        awk NF \
    )

    if [ "$metaGenerator" != "" ]; then
        printError "$checkName" "Found meta generator tag."
        $verbose && printBulletItem "Content: \"$metaGenerator\""
        return 1
    fi

    # no meta generator value was found.
    printSuccess "$checkName"
    return 0
}

function doSecurityTest {
    local stateOverall=0
    local testCount=1
    local url="$1"
    local hintUrl=""
    local usedUrl="$url"
    (! [[ "$usedUrl" =~ ^https? ]]) && usedUrl="http://$usedUrl"
    local header=$(getHeader "$usedUrl")

    # if we do have a curl error
    local curlError=$(echo "$header" | grep --color=never "curl: ([0-9]\+)" | sed -e 's/^curl:[ ]*([0-9][0-9]*)[ ]*//')
    if [ "$curlError" != "" ]; then
        # SSL error while trying to request a https connection
        if [[ "$curlError" =~ SSL ]] && [[ "$usedUrl" =~ ^https ]]; then
            # try to get a http connection
            usedUrl=$(echo "$usedUrl" | sed 's/^https/http/')
            header=$(getHeader "$usedUrl")
            hintUrl=" (SSL error)"
        else
            echo "Unknown curl error: $curlError"
            exit
        fi
    fi

    local lastHeader=$(getLastHeaderFromHeader "$header")
    local lastRedirect=$(getLastRedirectFromUrl "$usedUrl")
    local fullDomain=$(getFullDomainFromUrl "$lastRedirect")
    local domain=$(getDomainFromFullDomain "$fullDomain")
    local ip=$(getIpFromDomain "$fullDomain")
    local dnsSettings=$(getDNSSettingsFromDomain "$domain")
    local body=$(getBody "$usedUrl")
    local bodySize=$(echo "$body" | wc -c | xargs)
    local headerSize=$(echo "$lastHeader" | wc -c | xargs)
    local secure=true && [[ "$lastRedirect" =~ ^https ]] || secure=false
    local os=$(getOS)
    local nameserver=$(getNameserver "$domain")
    local provider=$(getProviderFromIP "$ip")
    local counter=0

    # print header for debugging reasons
    if $SHOW_HEADER; then
        echo
        repeatChar '=' $seperatorCount
        echo 'INFORMATIONS:'
        repeatChar '=' $seperatorCount
        printLine "given address" "$url$hintUrl"
        printLine "used address" "$usedUrl"
        printLine "last redirect" "$lastRedirect"
        if $secure; then
            printLine "secure connection" "yes"
            printLine "valid days ssl certificate" $(validDaysOfCert "$fullDomain" "$os")
        else
            printLine "secure connection" "no"                                                                                                                                           
        fi
        printLine "header size" "$headerSize Byte"
        printLine "body size" "$bodySize Byte"
        printLine "full domain" "$fullDomain"
        printLine "domain" "$domain"
        printLine "ip address" "$ip"
        counter=0; while read -r ns; do
            ((counter++))
            [ $counter -eq 1 ] && printLine "nameserver" "$ns" || printLine "" "$ns"
        done <<< "$nameserver"
        counter=0; while read -r p; do
            ((counter++))
            [ $counter -eq 1 ] && printLine "provider" "$p" || printLine "" "$p"
        done <<< "$provider"
        printLine "operating system" "$os"
        repeatChar '=' $seperatorCount
        echo && echo

        repeatChar '=' $seperatorCount
        echo 'DNS SETTINGS:'
        repeatChar '=' $seperatorCount
        echo "$dnsSettings"
        repeatChar '=' $seperatorCount
        echo && echo

        repeatChar '=' $seperatorCount
        echo 'HEADER:'
        repeatChar '=' $seperatorCount
        printMultipleStringWithLineNumber "$lastHeader"
        repeatChar '=' $seperatorCount
        echo && echo

        repeatChar '=' $seperatorCount
        echo 'TESTS:'
        repeatChar '=' $seperatorCount
    fi

    # do http status check
    ((testCount++)) && ( ! doHttpStatusCheck "$lastHeader" ) && ((stateOverall++))

    # do https check
    ((testCount++)) && ( ! doHttpsCheck "$lastRedirect" ) && ((stateOverall++))

    # do ssl check
    ((testCount++)) && ( ! doSslCheck "$lastRedirect" "$(getOS)" ) && ((stateOverall++))

    # do X-Powered-By check
    ((testCount++)) && ( ! doXPoweredCheck "$lastHeader" ) && ((stateOverall++))

    # do X-Generator check
    ((testCount++)) && ( ! doXGeneratorCheck "$lastHeader" ) && ((stateOverall++))

    # do cookie check
    ((testCount++)) && ( ! doHeaderCookieCheck "$lastHeader" ) && ((stateOverall++))

    # do HTTP Strict Transport Security check
    ((testCount++)) && ( ! doHstsCheck "$lastHeader" "$body" ) && ((stateOverall++))

    # do Content-Security-Policy check
    ((testCount++)) && ( ! doCspCheck "$lastHeader" "$body" ) && ((stateOverall++))

    # do X-XSS-Protection Header check
    ((testCount++)) && ( ! doXssCheck "$lastHeader" "$body" ) && ((stateOverall++))

    # do X-Content-Type-Options check
    ((testCount++)) && ( ! doCtoCheck "$lastHeader" "$body" ) && ((stateOverall++))

    # do X-Frame-Options check
    ((testCount++)) && ( ! doFoCheck "$lastHeader" "$body" ) && ((stateOverall++))

    # do Referrer-Policy Header check
    ((testCount++)) && ( ! doRpCheck "$lastHeader" "$body" ) && ((stateOverall++))

    # do Feature-Policy Header check
    ((testCount++)) && ( ! doFpCheck "$lastHeader" "$body" ) && ((stateOverall++))

    # do Server Header check
    ((testCount++)) && ( ! doShCheck "$lastHeader" "$body" ) && ((stateOverall++))

    # do Cross-Original-Destination check (rel links)
    ((testCount++)) && ( ! doSlCheck "$lastHeader" "$body" ) && ((stateOverall++))

    # do generator meta-tag check
    ((testCount++)) && ( ! doMdCheck "$lastHeader" "$body" ) && ((stateOverall++))

    # do CAA DNS check

    repeatChar '-' $seperatorCount
    ((testCount--))

    # print overall state
    if [ $stateOverall -eq 0 ]; then
        printSuccess "State" false "$testCount/$testCount tests passed."
    else
        printError "State" false "$stateOverall/$testCount tests failed. Check the errors before."
    fi

    if $SHOW_HEADER; then
        repeatChar '=' $seperatorCount
        echo
    fi
}

# start the test
if [ "$executionType" == "check" ]; then

    # Parameter one is expected as a config file
    if [ ${#PARAMETERS[@]} -lt 1 ]; then
        echo "The URL or IP to be checked was not passed." && exit 1
    fi

    # domain
    url="${PARAMETERS[0]}"

    # start redirect checker
    doSecurityTest "$url"
fi

