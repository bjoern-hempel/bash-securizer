#!/usr/bin/env bash

# This script tests a web application for security.
#
# @author Bj√∂rn Hempel <bjoern@hempel.li>
#
# Todo:
# - ssl certificate check
# - https check
# - Secure-Links count check
# - informations
#   - ip
#   - provider
#   - dns server


# script path
scriptPath="$(dirname "$(readlink "$0")")"

# include some libraries
source "$scriptPath/../libs/tools"
source "$scriptPath/../libs/output"
source "$scriptPath/../libs/request"
source "$scriptPath/../libs/analyse"
source "$scriptPath/../libs/os"
source "$scriptPath/../libs/cert"
source "$scriptPath/../libs/domain"

# scriptname
scriptName=$(basename "$0")

# initial values
executionType="check"

# declare parameter list array
PARAMETERS=()

# sets the title space
titleSpace=35

# sets the type space
typeSpace=14

# sets the seperator count
seperatorCount=63

# set default texts
defaultHeaderErrorText="Check the following headers"

# set user agent
userAgent='Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36'

# ssl error days
sslErrorDays=7

# ssl warning days (must be greater than sslErrorDays)
sslWarningDays=14

# initial values
SHOW_HEADER=false
SHOW_DNS=false
BASH_OUTPUT=true
JSON_OUTPUT=false
MARKDOWN_OUTPUT=false
OUTPUT_FORMAT='bash'
VERBOSE_MODE=false

# output variable
OUTPUT=""

# for calculation of check index
POINTS_MAX=0
POINTS_REACHED=0

# read arguments
# help: Usage: %scriptname% [OPTIONS] url
# help:
# help:   This script checks a given url for security.
# help:
# help: Options:
while [[ $# > 0 ]]; do
    case "$1" in
        # help:          --show-header             Show all headers next to the test.
        --show-header)
            SHOW_HEADER=true
            ;;

        # help:          --show-dns                Show the dns settings next to the test.
        --show-dns)
            SHOW_DNS=true
            ;;

        # help:   -b,    --bash                    Returns the result in bash text format.
        -b|--bash)
            BASH_OUTPUT=true
            JSON_OUTPUT=false
            MARKDOWN_OUTPUT=false
            OUTPUT_FORMAT='bash'
            ;;

        # help:   -j,    --json                    Returns the result in JSON format.
        -j|--json)
            BASH_OUTPUT=false
            JSON_OUTPUT=true
            MARKDOWN_OUTPUT=false
            OUTPUT_FORMAT='json'
            ;;

        # help:   -m,    --markdown                Returns the result in MARKDOWN format.
        -m|--markdown)
            BASH_OUTPUT=false
            JSON_OUTPUT=false
            MARKDOWN_OUTPUT=true
            OUTPUT_FORMAT='markdown'
            ;;

        # help:
        # help:          --verbose                 Switch this script into verbose mode.
        --verbose)
            VERBOSE_MODE=true
            ;;

        # help:   -h,    --help                    Shows this help.
        -h|--help)
            cat "$BASH_SOURCE" | grep --color=never "# help:" | grep -v 'cat parameter' | sed -E 's/[ ]*#[ ]*help:[ ]?//g' | sed "s~%scriptname%~$scriptName~g"
            exit 0
            ;;

        # help:   -v,    --version                 Shows the version number.
        -v|--version)
            [ "$(type -t showVersion)" == "function" ] && showVersion || echo "Create a showVersion function to show some text here."
            exit 0
            ;;

        # help:
        # collect all unknown parameters
        *)
            PARAMETERS+=("$1")
            ;;
    esac
    shift
done

function doHttpStatusCheck {
    local statusCode=200
    local checkName="HTTP status code $statusCode"
    local filter="HTTP/[0-9]\.[0-9] "
    local header="$1"
    local headerFiltered=$(echo -n "$header" | grep -i --color=never "$filter")

    if [[ "$headerFiltered" =~ HTTP/1.1[[:space:]]([0-9]*) ]]; then
        local content=${BASH_REMATCH[1]}

        if [ "$content" == "$statusCode" ]; then
            printSuccess $VERBOSE_MODE "http status" "$checkName"
            return 0
        else
            printError $VERBOSE_MODE "http status" "$checkName" "Status code $statusCode was not found."
            $VERBOSE_MODE && printBulletItem "Status code: $content"
            return 2
        fi
    fi

    # no header was found
    printWarning $VERBOSE_MODE "http status" "$checkName" "No \"$filter\" header was found. Usually one is expected."
    return 1
}

function doHttpsCheck {
    local checkName="HTTPS check"
    local lastRedirect="$1"

    if [[ "$lastRedirect" =~ ^https ]]; then
        printSuccess $VERBOSE_MODE "ssl" "$checkName"
        return 0
    fi

    printError $VERBOSE_MODE "ssl" "$checkName" "The page is not securely transmitted."
    return 2
}


function doSslCheck {
    local checkName="SSL certificate check"
    local lastRedirect="$1"
    local os="$2"
    local domain=$(getFullDomainFromUrl "$lastRedirect")

    if [[ "$lastRedirect" =~ ^https ]]; then
        validDays=$(validDaysOfCert "$domain" "$os")

        if [ "$validDays" -lt $sslErrorDays ]; then
            printError $VERBOSE_MODE "ssl" "$checkName" "only $validDays days left"
            return 2
        elif [ "$validDays" -lt $sslWarningDays ]; then
            printWarning $VERBOSE_MODE "ssl" "$checkName" "only $validDays days left"
            return 1
        else
            printSuccess $VERBOSE_MODE "ssl" "$checkName" "$validDays days left"
            return 0
        fi
    fi

    printError $VERBOSE_MODE "ssl" "$checkName" "The page is not securely transmitted."
    return 2
}

function doXPoweredCheck {
    local checkName="X-Powered-By"
    local filter="X-Powered-By"
    local header="$1"
    local headerFiltered=$(echo -n "$header" | grep -i --color=never "$filter:")

    # no header was found
    if [ "$headerFiltered" == "" ]; then
        printSuccess $VERBOSE_MODE "header" "$checkName"
        return 0
    fi

    # header was found -> check header
    local content=$(echo -n "$headerFiltered" | sed -e 's/^[0-9]*[ ]*'$filter': //')

    printError $VERBOSE_MODE "header" "$checkName" "\"$filter\" header was found and is not secure.\nContent: $content"
    return 2
}

function doXGeneratorCheck {
    local checkName="X-Generator"
    local filter="X-Generator"
    local header="$1"
    local headerFiltered=$(echo -n "$header" | grep -i --color=never "$filter:")

    # no header was found
    if [ "$headerFiltered" == "" ]; then
        printSuccess $VERBOSE_MODE "header" "$checkName"
        return 0
    fi

    # header was found -> check header
    local content=$(echo -n "$headerFiltered" | sed -e 's/^[0-9]*[ ]*'$filter': //')

    printError $VERBOSE_MODE "header" "$checkName" "\"$filter\" header was found and is not secure.\nContent: $content"
    return 2
}

function doHeaderCookieCheck {
    local checkName="Cookie Security"
    local filter="Cookie"
    local header="$1"
    local headerFiltered=$(echo -n "$header" | grep -i --color=never "$filter:")
    local headerFilteredNotSecured=$(echo -n "$headerFiltered" | awk '!(tolower($0) ~ /;[ ]*httponly/ && tolower($0) ~ /;[ ]*secure/)')
    local headerFilteredSamesite=$(echo -n "$headerFiltered" | awk '!(tolower($0) ~ /;[ ]*samesite=/)')
    local headerFilteredPrefix=$(echo -n "$headerFiltered" | awk '!($0 ~ /^Set-Cookie:[ ]*__HOST-/)')

    # given headers do have some issues
    if [ "$headerFilteredNotSecured" != "" ]; then
        printError "header" "$checkName" "$defaultHeaderErrorText\n$headerFilteredNotSecured"
        return 2
    fi

    local warning=""

    # given headers do not have samesite flag
    if [ "$headerFilteredSamesite" != "" ]; then
        [ "$warning" != "" ] && warning+=$'\n'
        warning+="It is recommend to use the \"samesite\" parameter."$'\n'"$headerFilteredSamesite"
    fi

    # given headers do not have samesite flag
    if [ "$headerFilteredPrefix" != "" ]; then
        [ "$warning" != "" ] && warning+=$'\n'
        warning+="It is recommend to use a cookie prefix: __HOST or __SECURE."$'\n'"$headerFilteredPrefix"
    fi

    # print warning and some recommendations
    if [ "$warning" != "" ]; then
        printWarning $VERBOSE_MODE "header" "$checkName" "$warning"
        return 1
    fi

    printSuccess $VERBOSE_MODE "header" "$checkName"
    return 0
}

function doHstsCheck {
    local checkName="HTTP Strict Transport Security"
    local filter="Strict-Transport-Security"
    local header="$1"
    local headerFiltered=$(echo -n "$header" | grep -i --color=never "$filter:")

    # no header was found
    if [ "$headerFiltered" == "" ]; then
        printError $VERBOSE_MODE "header" "$checkName" "No \"$checkName\" header was found."
        return 2
    fi

    # check given header
    local headerFilteredNotSecured=$(echo -n "$headerFiltered" | \
        awk '!(tolower($0) ~ /[:;][ ]*max-age/)' \
    )

    # we found insecure headers
    if [ "$headerFilteredNotSecured" != "" ]; then
        printError "header" "$checkName" "$defaultHeaderErrorText"$'\n'"$headerFilteredNotSecured"
        return 2
    fi

    # check given header
    local headerFilteredNotOptimal=$(echo -n "$headerFiltered" | \
        awk '!(tolower($0) ~ /[:;][ ]*max-age/ && tolower($0) ~ /[:;][ ]*includesubdomains/ && tolower($0) ~ /[:;][ ]*preload/)' \
    )

    if [ "$headerFilteredNotOptimal" != "" ]; then
        printWarning $VERBOSE_MODE "header" "$checkName" "It is recommended to include the attributes includesubdomains and preload."
        return 1
    fi

    printSuccess $VERBOSE_MODE "header" "$checkName"
    return 0
}

function doCspCheck {
    local checkName="Content-Security-Policy"
    local filter="Content-Security-Policy"
    local header="$1"
    local headerFiltered=$(echo -n "$header" | grep -i --color=never "$filter:")
    local warningText=""

    # no header was found
    if [ "$headerFiltered" == "" ]; then
        printError $VERBOSE_MODE "header" "$checkName" "No \"$checkName\" header was found."
        return 2
    fi

    # some error checks
    local error=false
    if $error; then
        printError "header" "$checkName" "$defaultHeaderErrorText"$'\n'"$headerFilteredNotSecured"
        return 2
    fi

    # some warning checks
    local headerFilteredNotSecured=$(echo -n "$headerFiltered" | grep -i --color=never "unsafe-inline")
    if [ "$headerFilteredNotSecured" != "" ]; then
        [ "$warningText" != "" ] && warningText="$warningText"$'\n'
        warningText+="It is not recommend to use the setting \"unsafe-inline\"."
    fi

    local headerFilteredNotSecured=$(echo -n "$headerFiltered" | grep -i --color=never "unsafe-eval")
    if [ "$headerFilteredNotSecured" != "" ]; then
        [ "$warningText" != "" ] && warningText="$warningText"$'\n'
        warningText+="It is not recommend to use the setting \"unsafe-eval\"."
    fi

    # print status text
    if [ "$warningText" == "" ]; then
        printSuccess $VERBOSE_MODE "header" "$checkName"
        return 0
    else
        printWarning $VERBOSE_MODE "header" "$checkName" "$warningText"
        return 1
    fi
}

function doXssCheck {
    local checkName="X-XSS-Protection Header"
    local filter="X-XSS-Protection"
    local header="$1"
    local headerFiltered=$(echo -n "$header" | grep -i --color=never "$filter:")

    # no header was found
    if [ "$headerFiltered" == "" ]; then
        printError $VERBOSE_MODE "header" "$checkName" "No \"$checkName\" header was found."
        return 2
    fi

    local headerFilteredNotSecured=""
    if [ "$headerFilteredNotSecured" == "" ]; then
        printSuccess $VERBOSE_MODE "header" "$checkName"
        return 0
    fi

    return 2
}

function doCtoCheck {
    local checkName="X-Content-Type-Options"
    local filter="X-Content-Type-Options"
    local header="$1"
    local headerFiltered=$(echo -n "$header" | grep -i --color=never "$filter:")

    # no header was found
    if [ "$headerFiltered" == "" ]; then
        printError $VERBOSE_MODE "header" "$checkName" "No \"$checkName\" header was found."
        return 2
    fi

    local headerFilteredNotSecured=""

    if [ "$headerFilteredNotSecured" == "" ]; then
        printSuccess $VERBOSE_MODE "header" "$checkName"
        return 0
    fi

    return 2
}

function doFoCheck {
    local checkName="X-Frame-Options"
    local filter="X-Frame-Options"
    local header="$1"
    local headerFiltered=$(echo -n "$header" | grep -i --color=never "$filter:")

    # no header was found
    if [ "$headerFiltered" == "" ]; then
        printError $VERBOSE_MODE "header" "$checkName" "No \"$checkName\" header was found."
        return 2
    fi

    local headerFilteredNotSecured=""

    if [ "$headerFilteredNotSecured" == "" ]; then
        printSuccess $VERBOSE_MODE "header" "$checkName"
        return 0
    fi

    return 2
}

function doRpCheck {
    local checkName="Referrer-Policy"
    local filter="Referrer-Policy"
    local header="$1"
    local headerFiltered=$(echo -n "$header" | grep -i --color=never "$filter:")

    # no header was found
    if [ "$headerFiltered" == "" ]; then
        printError $VERBOSE_MODE "header" "$checkName" "No \"$checkName\" header was found."
        return 2
    fi

    local headerFilteredNotSecured=""

    if [ "$headerFilteredNotSecured" == "" ]; then
        printSuccess $VERBOSE_MODE "header" "$checkName"
        return 0
    fi

    return 2
}

function doFpCheck {
    local checkName="Feature-Policy"
    local filter="Feature-Policy"
    local header="$1"
    local headerFiltered=$(echo -n "$header" | grep -i --color=never "$filter:")

    # no header was found
    if [ "$headerFiltered" == "" ]; then
        printError $VERBOSE_MODE "header" "$checkName" "No \"$filter\" header was found."
        return 2
    fi

    local headerFilteredNotSecured=""

    if [ "$headerFilteredNotSecured" == "" ]; then
        printSuccess $VERBOSE_MODE "header" "$checkName"
        return 0
    fi

    return 2
}

function doShCheck {
    local checkName="Server-Header"
    local filter="Server"
    local header="$1"
    local headerFiltered=$(echo -n "$header" | grep -i --color=never "$filter:")

    # no header was found
    if [ "$headerFiltered" == "" ]; then
        printSuccess $VERBOSE_MODE "header" "$checkName"
        return 0
    fi

    # header was found -> check header
    local content=$(echo -n "$headerFiltered" | sed -e 's/^[0-9]*[ ]*Server: //')

    local contentCheck=true && [[ "$content" =~ ^[a-zA-Z]+$ ]] || contentCheck=false

    if ! $contentCheck; then
        printError $VERBOSE_MODE "header" "$checkName" "\"$filter\" header was found and is not secure."$'\n'"Content: $content"
        return 2
    fi

    printWarning $VERBOSE_MODE "header" "$checkName" "If possible, disable the following content: \"$content\""
    return 1
}

function doSlCheck {
    local checkName="Secure-Links"
    local header="$1"
    local body="$2"

    # todo: check if xmllink exists

    local numberLinksUnsecure=$(\
        echo "$body" | \
        xmllint --nowarning --html --xpath '//a[contains(@target, "_blank") and (starts-with(@href, "http") or starts-with(@href, "//")) and (not(contains(@rel, "noopener")) or not(contains(@rel, "noreferrer")))]' - 2>/dev/null | \
        sed 's/><a />\'$'\n<a /g' | \
        grep '<a ' | \
        wc -l | \
        xargs \
    )

    # we do have some insecure links
    if [ $numberLinksUnsecure -gt 0 ]; then
        printError $VERBOSE_MODE "html" "$checkName" "Found $numberLinksUnsecure external links with target \"_blank\" and without rel attribute \"noopener\" and \"noreferrer\"."
        return 2
    fi

    # all links are safe
    printSuccess $VERBOSE_MODE "html" "$checkName"
    return 0
}

function doMdCheck {
    local checkName="Metadata"
    local header="$1"
    local body="$2"

    # todo: check if xmllink exists

    local metaGenerator=$(\
        echo "$body" | \
        xmllint --nowarning --html --pretty 0 --xpath 'string(//meta[@name="generator"]/@content)' - 2>/dev/null | \
        awk NF \
    )

    if [ "$metaGenerator" != "" ]; then
        printError $VERBOSE_MODE "html" "$checkName" "Found meta generator tag."$'\n'"Content: \"$metaGenerator\""
        return 2
    fi

    # no meta generator value was found.
    printSuccess $VERBOSE_MODE "html" "$checkName"
    return 0
}

function doSecurityTest {
    local countTestFail=0
    local countTestAll=0
    local countTestSuccess=0
    local url="$1"
    local hintUrl=""
    local usedUrl="$url"
    (! [[ "$usedUrl" =~ ^https? ]]) && usedUrl="http://$usedUrl"
    local header=$(getHeader "$usedUrl")

    # if we do have a curl error
    local curlError=$(echo "$header" | grep --color=never "curl: ([0-9]\+)" | sed -e 's/^curl:[ ]*([0-9][0-9]*)[ ]*//')
    if [ "$curlError" != "" ]; then
        # SSL error while trying to request a https connection
        if [[ "$curlError" =~ SSL ]] && [[ "$usedUrl" =~ ^https ]]; then
            # try to get a http connection
            usedUrl=$(echo "$usedUrl" | sed 's/^https/http/')
            header=$(getHeader "$usedUrl")
            hintUrl=" (SSL error)"
        else
            echo "Unknown curl error: $curlError"
            exit
        fi
    fi

    local lastHeader=$(getLastHeaderFromHeader "$header")
    local lastRedirect=$(getLastRedirectFromUrl "$usedUrl")
    local fullDomain=$(getFullDomainFromUrl "$lastRedirect")
    local domain=$(getDomainFromFullDomain "$fullDomain")
    local ip=$(getIpFromDomain "$fullDomain")
    local dnsSettings=$(getDNSSettingsFromDomain "$domain")
    local body=$(getBody "$usedUrl")
    local bodySize=$(echo "$body" | wc -c | xargs)
    local headerSize=$(echo "$lastHeader" | wc -c | xargs)
    local secure=true && [[ "$lastRedirect" =~ ^https ]] || secure=false
    local os=$(getOS)
    local nameserver=$(getNameserver "$domain")
    local provider=$(getProviderFromIP "$ip")
    local counter=0
    local statusCode=0

    # do http status check
    ((++countTestAll)) &&  OUTPUT="$OUTPUT"$(doHttpStatusCheck "$lastHeader")$'\n'; statusCode=$? && [ $statusCode -gt 1 ] && ((++countTestFail))
    POINTS_MAX=$(expr $POINTS_MAX + 2); POINTS_REACHED=$(expr $POINTS_REACHED + 2 - $statusCode)

    # do https check
    ((++countTestAll)) && OUTPUT="$OUTPUT"$(doHttpsCheck "$lastRedirect")$'\n'; statusCode=$? && [ $statusCode -gt 1 ] && ((++countTestFail))
    POINTS_MAX=$(expr $POINTS_MAX + 2); POINTS_REACHED=$(expr $POINTS_REACHED + 2 - $statusCode)

    # do ssl check
    ((++countTestAll)) && OUTPUT="$OUTPUT"$(doSslCheck "$lastRedirect" "$(getOS)")$'\n'; statusCode=$? && [ $statusCode -gt 1 ] && ((++countTestFail))
    POINTS_MAX=$(expr $POINTS_MAX + 2); POINTS_REACHED=$(expr $POINTS_REACHED + 2 - $statusCode)

    # do X-Powered-By check
    ((++countTestAll)) && OUTPUT="$OUTPUT"$(doXPoweredCheck "$lastHeader")$'\n'; statusCode=$? && [ $statusCode -gt 1 ] && ((++countTestFail))
    POINTS_MAX=$(expr $POINTS_MAX + 2); POINTS_REACHED=$(expr $POINTS_REACHED + 2 - $statusCode)

    # do X-Generator check
    ((++countTestAll)) && OUTPUT="$OUTPUT"$(doXGeneratorCheck "$lastHeader")$'\n'; statusCode=$? && [ $statusCode -gt 1 ] && ((++countTestFail))
    POINTS_MAX=$(expr $POINTS_MAX + 2); POINTS_REACHED=$(expr $POINTS_REACHED + 2 - $statusCode)

    # do cookie check
    ((++countTestAll)) && OUTPUT="$OUTPUT"$(doHeaderCookieCheck "$lastHeader")$'\n'; statusCode=$? && [ $statusCode -gt 1 ] && ((++countTestFail))
    POINTS_MAX=$(expr $POINTS_MAX + 2); POINTS_REACHED=$(expr $POINTS_REACHED + 2 - $statusCode)

    # do HTTP Strict Transport Security check
    ((++countTestAll)) && OUTPUT="$OUTPUT"$(doHstsCheck "$lastHeader" "$body")$'\n'; statusCode=$? && [ $statusCode -gt 1 ] && ((++countTestFail))
    POINTS_MAX=$(expr $POINTS_MAX + 2); POINTS_REACHED=$(expr $POINTS_REACHED + 2 - $statusCode)

    # do Content-Security-Policy check
    ((++countTestAll)) && OUTPUT="$OUTPUT"$(doCspCheck "$lastHeader" "$body")$'\n'; statusCode=$? && [ $statusCode -gt 1 ] && ((++countTestFail))
    POINTS_MAX=$(expr $POINTS_MAX + 2); POINTS_REACHED=$(expr $POINTS_REACHED + 2 - $statusCode)

    # do X-XSS-Protection Header check
    ((++countTestAll)) && OUTPUT="$OUTPUT"$(doXssCheck "$lastHeader" "$body")$'\n'; statusCode=$? && [ $statusCode -gt 1 ] && ((++countTestFail))
    POINTS_MAX=$(expr $POINTS_MAX + 2); POINTS_REACHED=$(expr $POINTS_REACHED + 2 - $statusCode)

    # do X-Content-Type-Options check
    ((++countTestAll)) && OUTPUT="$OUTPUT"$(doCtoCheck "$lastHeader" "$body")$'\n'; statusCode=$? && [ $statusCode -gt 1 ] && ((++countTestFail))
    POINTS_MAX=$(expr $POINTS_MAX + 2); POINTS_REACHED=$(expr $POINTS_REACHED + 2 - $statusCode)

    # do X-Frame-Options check
    ((++countTestAll)) && OUTPUT="$OUTPUT"$(doFoCheck "$lastHeader" "$body")$'\n'; statusCode=$? && [ $statusCode -gt 1 ] && ((++countTestFail))
    POINTS_MAX=$(expr $POINTS_MAX + 2); POINTS_REACHED=$(expr $POINTS_REACHED + 2 - $statusCode)

    # do Referrer-Policy Header check
    ((++countTestAll)) && OUTPUT="$OUTPUT"$(doRpCheck "$lastHeader" "$body")$'\n'; statusCode=$? && [ $statusCode -gt 1 ] && ((++countTestFail))
    POINTS_MAX=$(expr $POINTS_MAX + 2); POINTS_REACHED=$(expr $POINTS_REACHED + 2 - $statusCode)

    # do Feature-Policy Header check
    ((++countTestAll)) && OUTPUT="$OUTPUT"$(doFpCheck "$lastHeader" "$body")$'\n'; statusCode=$? && [ $statusCode -gt 1 ] && ((++countTestFail))
    POINTS_MAX=$(expr $POINTS_MAX + 2); POINTS_REACHED=$(expr $POINTS_REACHED + 2 - $statusCode)

    # do Server Header check
    ((++countTestAll)) && OUTPUT="$OUTPUT"$(doShCheck "$lastHeader" "$body")$'\n'; statusCode=$? && [ $statusCode -gt 1 ] && ((++countTestFail))
    POINTS_MAX=$(expr $POINTS_MAX + 2); POINTS_REACHED=$(expr $POINTS_REACHED + 2 - $statusCode)

    # do Cross-Original-Destination check (rel links)
    ((++countTestAll)) && OUTPUT="$OUTPUT"$(doSlCheck "$lastHeader" "$body")$'\n'; statusCode=$? && [ $statusCode -gt 1 ] && ((++countTestFail))
    POINTS_MAX=$(expr $POINTS_MAX + 2); POINTS_REACHED=$(expr $POINTS_REACHED + 2 - $statusCode)

    # do generator meta-tag check
    ((++countTestAll)) && OUTPUT="$OUTPUT"$(doMdCheck "$lastHeader" "$body")$'\n'; statusCode=$? && [ $statusCode -gt 1 ] && ((++countTestFail))
    POINTS_MAX=$(expr $POINTS_MAX + 2); POINTS_REACHED=$(expr $POINTS_REACHED + 2 - $statusCode)

    # do CAA DNS check
    # TODO

    # calculate the successful tests
    countTestSuccess=$(expr $countTestAll - $countTestFail)

    # test index
    local checkIndex=$((100 * $POINTS_REACHED / $POINTS_MAX))

    # print header for debugging reasons
    if $SHOW_HEADER; then
        echo
        repeatChar '=' $seperatorCount
        echo 'INFORMATIONS:'
        repeatChar '=' $seperatorCount
        printLine "Check index" "$checkIndex%"
        printLine "Given address" "$url$hintUrl"
        printLine "Used address" "$usedUrl"
        printLine "Last redirect" "$lastRedirect"
        if $secure; then
            printLine "Secure connection" "yes"
            printLine "Valid days ssl certificate" $(validDaysOfCert "$fullDomain" "$os")
        else
            printLine "Secure connection" "no"
        fi
        printLine "Header size" "$headerSize Byte"
        printLine "Body size" "$bodySize Byte"
        printLine "Full domain" "$fullDomain"
        printLine "Domain" "$domain"
        printLine "IP address" "$ip"
        counter=0; while read -r ns; do
            ((counter++))
            [ $counter -eq 1 ] && printLine "nameserver" "$ns" || printLine "" "$ns"
        done <<< "$nameserver"
        counter=0; while read -r p; do
            ((counter++))
            [ $counter -eq 1 ] && printLine "provider" "$p" || printLine "" "$p"
        done <<< "$provider"
        printLine "Successful tests" "$countTestSuccess"
        printLine "Failed tests" "$countTestFail"
        printLine "Total number of tests" "$countTestAll"
        printLine "Operating system" "$os"
        repeatChar '=' $seperatorCount
        echo && echo

        repeatChar '=' $seperatorCount
        echo 'DNS SETTINGS:'
        repeatChar '=' $seperatorCount
        echo "$dnsSettings"
        repeatChar '=' $seperatorCount
        echo && echo

        repeatChar '=' $seperatorCount
        echo 'HEADER:'
        repeatChar '=' $seperatorCount
        printMultipleStringWithLineNumber "$lastHeader"
        repeatChar '=' $seperatorCount
        echo && echo

        repeatChar '=' $seperatorCount
        echo 'TESTS:'
        repeatChar '=' $seperatorCount
    else
        echo
    fi

    echo -en "$OUTPUT"
    repeatChar '-' $seperatorCount

    # print overall state
    if [ $countTestFail -eq 0 ]; then
        statusCode=0
        printSuccess $VERBOSE_MODE "summary" "State" "$countTestAll/$countTestAll tests passed."
    else
        statusCode=1
        printError $VERBOSE_MODE "summary" "State" "$countTestFail/$countTestAll tests failed."
    fi

    if $SHOW_HEADER; then
        repeatChar '=' $seperatorCount
        echo
    else
        echo
    fi

    return $statusCode
}

# start the test
if [ "$executionType" == "check" ]; then

    # Parameter one is expected as a config file
    if [ ${#PARAMETERS[@]} -lt 1 ]; then
        echo "The URL or IP to be checked was not passed." && exit 1
    fi

    # domain
    url="${PARAMETERS[0]}"

    # start redirect checker
    doSecurityTest "$url"

    # get last exit code
    status=$?

    # throw status code
    exit $status
fi

