#!/usr/bin/env bash

# initial values
executionType="check"

# script path
scriptPath="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

# declare parameter list array
PARAMETERS=()

# sets the title space
titleSpace=35

# set default texts
defaultHeaderErrorText="Check the following headers"

# read arguments
# help:
# help: Usage: %scriptname% [options...] {install|update|status}
while [[ $# > 0 ]]; do
    case "$1" in
        # help:  -h,    --help                    Shows this help.
        # help:
        -h|--help)
            cat "$BASH_SOURCE" | grep --color=never "# help:" | grep -v 'cat parameter' | sed 's/[ ]*# help:[ ]*//g' | sed "s~%scriptname%~$scriptname~g"
            exit 0
            ;;

        # help:  -v,    --version                 Shows the version number.
        # help:
        -v|--version)
            [ "$(type -t showVersion)" == "function" ] && showVersion || echo "Create a showVersion function to show some text here."
            exit 0
            ;;

        # collect all unknown parameters
        *)
            PARAMETERS+=("$1")
            ;;
    esac
    shift
done

# assign mode to executionType var
#if [ ! -z ${PARAMETERS[0]} ]; then
#    executionType="${PARAMETERS[0]}"
#fi

# declare domains variable
declare -A domains

function getHeader {
    curl -I -L $1 2>&1
}

function hasRedirectFromHeader {
    local targetCurrent=$(echo "$1" | grep --color=never Location | tail -n 1 | sed 's/^Location: //')

    # no Location header was found
    [ "$targetCurrent" == "" ] && return 1

    # header was found
    return 0
}

function getLastRedirectFromHeader {
    local targetCurrent=$(echo "$1" | grep --color=never Location | tail -n 1 | sed 's/^Location: //')

    # no Location header was found
    [ "$targetCurrent" == "" ] && return

    # remove some special chars
    targetCurrent=$(echo -e -n "$targetCurrent" | xargs | tr -dc ':/.\-[:alnum:]')

    echo "$targetCurrent"
}

function checkLink {
    local domain="$1"
    local targetExpected="$2"
    local testState=$3
    local numberCurrentTest=$4
    local numberAllTests=$5
    local state=0
    local header=""

    echo "$numberCurrentTest/$numberAllTests) check domain $domain"
    echo "target expected: $targetExpected "

    # fetch header
    if ! $testState; then
        header=$(getHeader "$domain")
    fi

    # extract redirect
    if hasRedirectFromHeader "$header"; then
        targetCurrent=$(getLastRedirectFromHeader "$header")
    else
        targetCurrent="no redirect was found"
    fi

    echo "target current:  $targetCurrent"

    echo -n "State: "
    if $testState || [ "$targetCurrent" == "$targetExpected" ]; then
        echo -e "\e[42mOK\e[0m"
        state=0
    else
        echo -e "\e[41mNOT OK\e[0m"
        state=1
    fi

    echo ""

    # simulate positive state
    $testState && return 0

    return $state
}

function getHeader {
    local url="$1"
    local header=$(curl -sIL "$url" | awk '/^HTTP\/1.1 3[0-9][0-9]/{while(getline && $0 != "\r"){}}1')
    echo "$header"
}

function printHeader {
    echo ""
    echo "---"
    echo "${1^^}"
    echo "---"
}

function printSuccess {
    local title="$1"
    local textPassed="${2:-Test passed.}"
    printf '%-'$titleSpace's \e[42m%s\e[0m\n' "$title:" "$textPassed"
}

function printError {
    local title="$1"
    local hint="${2:----}"
    local textPassed="${3:-Test failed.}"
    printf '%-'$titleSpace's \e[41m%s\e[0m (%s)\n' "$title:" "$textPassed" "$hint"
}

function printErrorIncludingMessage {
    printError "$1" "$2"
    echo "$3" | sed 's/^/> /'
}

function doHeaderCookieCheck {
    local checkName="Cookie Security"
    local filter="Cookie"
    local header="$1"
    local headerFiltered=$(echo -n "$header" | grep -i --color=never "$filter:")
    local headerFilteredNotSecured=$(echo -n "$headerFiltered" | awk '!(tolower($0) ~ /[ ]*httponly/ && tolower($0) ~ /;[ ]*secure/)')

    if [ "$headerFilteredNotSecured" == "" ]; then
        printSuccess "$checkName"
        return 0
    fi

    # given headers do have some issues
    printErrorIncludingMessage "$checkName" "$defaultHeaderErrorText" "$headerFilteredNotSecured"
    return 1
}

function doHstsCheck {
    local checkName="HTTP Strict Transport Security"
    local filter="Strict-Transport-Security"
    local header="$1"
    local headerFiltered=$(echo -n "$header" | grep -i --color=never "$filter:")

    # no header was found
    if [ "$headerFiltered" == "" ]; then
        printError "$checkName" "No \"$checkName\" header was found."
        return 1
    fi

    # check given header
    local headerFilteredNotSecured=$(echo -n "$headerFiltered" | \
        awk '!(tolower($0) ~ /[:;][ ]*max-age/ && tolower($0) ~ /[:;][ ]*includesubdomains/ && tolower($0) ~ /[:;][ ]*preload/)' \
    )

    if [ "$headerFilteredNotSecured" == "" ]; then
        printSuccess "$checkName"
        return 0
    fi

    # given headers do have some issues
    printErrorIncludingMessage "$checkName" "$defaultHeaderErrorText" "$headerFilteredNotSecured"
    return 1
}

function doCspCheck {
    local checkName="Content-Security-Policy"
    local filter="Content-Security-Policy"
    local header="$1"
    local headerFiltered=$(echo -n "$header" | grep -i --color=never "$filter:")

    # no header was found
    if [ "$headerFiltered" == "" ]; then
        printError "$checkName" "No \"$checkName\" header was found."
        return 1
    fi

    local headerFilteredNotSecured=$(echo -n "$headerFiltered" | grep -i --color=never "unsafe-inline")

    if [ "$headerFilteredNotSecured" == "" ]; then
        printSuccess "$checkName"
        return 0
    fi

    printErrorIncludingMessage "$checkName" "$defaultHeaderErrorText" "$headerFilteredNotSecured"
    return 1
}

function doXssCheck {
    local checkName="X-XSS-Protection Header"
    local filter="X-XSS-Protection"
    local header="$1"
    local headerFiltered=$(echo -n "$header" | grep -i --color=never "$filter:")

    # no header was found
    if [ "$headerFiltered" == "" ]; then
        printError "$checkName" "No \"$checkName\" header was found."
        return 1
    fi

    local headerFilteredNotSecured=""
                                                                                                                                                                                         
    if [ "$headerFilteredNotSecured" == "" ]; then
        printSuccess "$checkName"
        return 0
    fi

    return 1
}

function doCtoCheck {
    local checkName="X-Content-Type-Options"
    local filter="X-Content-Type-Options"
    local header="$1"
    local headerFiltered=$(echo -n "$header" | grep -i --color=never "$filter:")

    # no header was found
    if [ "$headerFiltered" == "" ]; then
        printError "$checkName" "No \"$checkName\" header was found."
        return 1
    fi

    local headerFilteredNotSecured=""

    if [ "$headerFilteredNotSecured" == "" ]; then
        printSuccess "$checkName"
        return 0
    fi

    return 1
}

function doSecurityTest {
    local stateOverall=true
    local url="$1"


    local header=$(getHeader "$url")

    # print header for debugging reasons
    echo ""
    echo "HEADER"
    echo "---"
    echo "$header"
    echo "---"
    echo
    echo

    # do cookie check
    ( ! doHeaderCookieCheck "$header" ) && stateOverall=false

    # do HTTP Strict Transport Security check
    ( ! doHstsCheck "$header" ) && stateOverall=false

    # do Content-Security-Policy check
    ( ! doCspCheck "$header" ) && stateOverall=false

    # do X-XSS-Protection Header check
    ( ! doXssCheck "$header" ) && stateOverall=false

    # do X-Content-Type-Options check
    ( ! doCtoCheck "$header" ) && stateOverall=false

    echo "---"
    # print state
    if $stateOverall; then
        printSuccess "State" "All tests passed."
    else
        printError "State" "see errors below" "At least one test failed."
    fi
    echo ""
    echo ""
}

# start the test
if [ "$executionType" == "check" ]; then

    # Parameter one is expected as a config file
    if [ ${#PARAMETERS[@]} -lt 1 ]; then
        echo "The URL or IP to be checked was not passed." && exit 1
    fi

    # domain
    url="${PARAMETERS[0]}"

    # start redirect checker
    doSecurityTest "$url"
fi

